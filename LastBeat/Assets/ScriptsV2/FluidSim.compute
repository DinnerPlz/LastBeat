// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define expansionMatrix (uint2x2(3, 1, 1 ,3))
#define IX(i) (i.x * N + i.y)

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct cell
{
    float2 u; // vector at one pos
    float dens; // desnisty

    float soures; // where some is emitted
};

RWTexture2D<float4> Result;
RWStructuredBuffer<cell> data0; // read to
RWStructuredBuffer<cell> data1; // write to
// these get swapped in the c# script so no buffer swap shit in here

int buff;
int N; // size

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 col = 0;
    //id += uint3(1, 1, 1); // ensure that the edges arn't written to,
    // weird shit alert: the edge edge cell write to the egde cell they are adjesent to
    // this is a hacky fix but i need for consevation of mass
    cell c;
    if (buff == 0) {
        c = data0.Load(IX(id));
    }
    else {
        c = data1.Load(IX(id));
    }
    

    if (c.dens < 0.5f) {
        c.dens = 1;
    }
    else {
        c.dens = 0;
    }
    
    col = c.dens;

    if (buff == 0) {
        data0[IX(id)] = c;
    }
    else {
        data1[IX(id)] = c;
    }
    Result[id.xy] = col; // ensure offset
}


