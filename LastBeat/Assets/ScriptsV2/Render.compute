// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include <noiseSimplex.cginc>

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


struct Pixel {
    int val;
};

RWTexture2D<float4> Result;

RWStructuredBuffer<Pixel> Data0; // shit, cant be fucked to use this the proper way
RWStructuredBuffer<Pixel> Data1; // cant be fucked to think of a better way to swap buffers


bool regen;

int buff; // buffer id, swaps every frame

int size;

float4 RenderPixel(Pixel pix);
Pixel int4ToPixel(int4 dat);
int4 pixelToint4(Pixel pix);
void getNeighbors(inout uint2 neighs[8], uint3 pos);
int StepFunction(float input, float cutOff);

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int height = 0;
    int width = 0;
    Result.GetDimensions(width, height);
    
    int buffID = 0; // 1d loc on structred buffer
    buffID = id.x * width + id.y;
    
    Pixel pix;
    
    if (buff == 1)
    {
        pix = Data1.Load(buffID);
    }
    else
    {
        pix = Data1.Load(buffID);
    }
    
    
    
    uint2 neigh[8] = { uint2(01, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1) }; // wtf. cant use uint2[8]???
    int neighBuffID[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    getNeighbors(neigh, id.xyz);
    
    if (regen)
    {
        pix.val = StepFunction(snoise(id.xy), 0.5f);
    }
    else
    {
        
    }
    

    

    
    
    // acuall computaion
    
   
    
    
    if (buff == 1)
    {
        Data0[buffID] = pix;
    }
    else
    {
        Data1[buffID] = pix;
    }
    Result[id.xy] = RenderPixel(pix);
}
float4 RenderPixel(Pixel pix) {
    return float4(1.0, 0.0, (pix.val == 1) * 1.0, 1.0);
} // takes the cluster fuck that is my data storage and converts to color
void getNeighbors(inout uint2 neighs[8], uint3 pos) {
    int i = 0;
    for (int x = -1; x < 2; x++)
    {
        for (int y = -1; y < 2; y++)
        {
            
            if (x != 0 || y != 0)
            {
                neighs[i] = uint2(pos.xy + int2(x, y));
                i++;
            }
            
        }
    }

}
void computeNeighBuffID(inout int[8], uint pos)
{
    for (int i = 0; i < 8; i++)
    {
        
    }

}
int StepFunction(float input, float cutOff)
{
    return input > cutOff ? 1 : 0;
}
