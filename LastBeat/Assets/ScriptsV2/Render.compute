// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include <noiseSimplex.cginc>

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


struct Pixel {
    bool live;
    
};

RWTexture2D<float4> Result;


RWTexture2D<int4> Data0; // shit, cant be fucked to use this the proper way
RWTexture2D<int4> Data1;  // cant be fucked to think of a better way to swap buffers
// really uniffecnet, use buffers later




int buff; // buffer id, swaps every frame

int size;

float4 RenderPixel(Pixel pix);
Pixel int4ToPixel(int4 dat);
int4 pixelToint4(Pixel pix);
void getNeighbors(inout uint2 neighs[8], uint3 pos);

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    float4 col;
    uint2 neigh[8] = { uint2(01, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1), uint2(1, 1) };
    getNeighbors(neigh, id.xyz);

    int4 read; // abstract buffers
    int4 write; 

    if(buff == 1) {
        read = Data1[id.xy];
    } else {
        read = Data0[id.xy];
    }

    Pixel pix = int4ToPixel(read);
    
    
    if (id.y < 128)
    {
        pix.live = true;
    }
    if(id.y >= 128)
    {
        pix.live = false;
    }

    //pix.live = false;
    
    bool test;

    col = pix.live ? float4(1, 0, 1, 1) : float4(1, 0, 0, 1);
    
    write = pixelToint4(pix);
    

    if(buff == 1) {
        Data0[id.xy] = write;
    } else {
        Data1[id.xy] = write;
    } // write to the opposite buffer read from
    
    Result[id.xy] = col;
}
float4 RenderPixel(Pixel pix) {
    return pix.live ? float4(1,0,1,1) : float4(1,0,0,1);
} // takes the cluster fuck that is my data storage and converts to color
Pixel int4ToPixel(int4 dat) {
    Pixel pix;
    pix.live = dat.x == 1;
    return pix;
}
int4 pixelToint4(Pixel pix) {
    int4 dat;
    dat.x = pix.live ? 1 : 0;
    dat.yzw = 0;
    return dat;
}
void getNeighbors(inout uint2 neighs[8], uint3 pos) {
    int i = 0;
    for (int x = -1; x < 2; x++)
    {
        for (int y = -1; y < 2; y++)
        {
            
            if (x != 2 && y != 2)
                neighs[i] = pos.xy;
            
            
        }
    }

}
