// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include <noiseSimplex.cginc>

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


struct Pixel {
    bool live;
    
};

RWTexture2D<float4> Result;


RWTexture2D<int4> Data0; // shit, cant be fucked to use this the proper way
RWTexture2D<int4> Data1;  // cant be fucked to think of a better way to swap buffers
// really uniffecnet, use buffers later




int buff; // buffer id, swaps every frame

int size;

float4 RenderPixel(Pixel pix);
Pixel int4ToPixel(int4 dat);
int4 pixelToint4(Pixel pix);

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    float3 col;
    uint2 neigh[8];

    int4 read; // abstract buffers
    int4 write; 

    if(buff == 1) {
        read = Data1[id.xy];
    } else {
        read = Data0[id.xy];
    }

    Pixel pix = int4ToPixel(read);
    // now have working Pixel







    col = RenderPixel(pix);
    
    write = pixelToint4(pix);
    

    if(buff == 1) {
        Data1[id.xy] = write;
    } else {
        Data1[id.xy] = write;
    } // write to the opposite buffer read from
    
    Result[id.xy] = RenderPixel(pix);
}
float4 RenderPixel(Pixel pix) {
    return pix.live ? (1,1,1,1) : (0,0,0,1);
} // takes the cluster fuck that is my data storage and converts to color
Pixel int4ToPixel(int4 dat) {
    Pixel pix;
    pix.live = dat.x == 1;
    return pix;
}
int4 pixelToint4(Pixel pix) {
    int4 dat;
    dat.x = pix.live ? 1 : 0;
    dat.yzw = 0;
    return dat;
}
